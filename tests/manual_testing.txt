#
# ms-nfs41-client manual testing sequence, 2024-02-26
#
# Draft version, needs to be turned into automated tests
# if possible
#

#
# Notes:
# - The following Cygwin packages must be installed for running the tests:
#   ---- snip ----
#   make
#   git
#   netpbm
#   subversion
#   dos2unix
#   ncurses-devel
#   libgmp-devel
#   libmpfr-devel
#   libmpc-devel
#   libintl-devel
#   libisl-devel
#   flex
#   bison
#   ---- snip ----
#
# - Benchmarking/profiling should be done with the realtime virus checker
#   disabled, e.g. disable it like this from an "Adminstrator" terminal:
#   $ powershell -Command 'Set-MpPreference -DisableRealtimeMonitoring 1' #
#
# - A timeserver shoud be running on both Windows (NFSv4.1 client and
#   NFSv4.1 server).
#   For example on Windows add timeserver 10.49.0.6 like this:
#   ---- snip ----
#   net start w32time
#   w32tm /config /update /manualpeerlist:10.49.0.6
#   ---- snip ----
#   (see https://stackoverflow.com/questions/22862236/how-to-sync-windows-time-from-a-ntp-time-server-in-command)
#   On Linux use xntpd or timesyncd (/etc/systemd/timesyncd.conf)
#
# - Start cygserver as admin before running tests
#   so SysV shared memory works:
#   ---- snip ----
#   cygserver-config
#   net start cygserver
#   sc query cygserver
#   ---- snip ----
#

#
# Tests for cp -p/mv/chmod/chgrp
# Testcases, all should print *ONLY* "OK" on stdout, nothing on stderr
---- snip ----
ksh93 -c 'builtin mv ; rm -f /tmp/x y ; touch /tmp/x ; mv /tmp/x y && print OK ; true'
ksh93 -c 'builtin mv ; rm -f /tmp/x y ; touch /tmp/x ; cp -p /tmp/x y && print OK ; true'
ksh93 -c 'builtin cp ; rm -f /tmp/x y ; touch /tmp/x ; cp -p /tmp/x y && print OK ; true'
ksh93 -c 'builtin cp ; rm -f x y ; touch x ; cp -p /tmp/x y && print OK ; true'
ksh93 -c 'builtin cp ; rm -f x y ; touch x ; cp -p x y && print OK ; true'
ksh93 -c 'builtin cp ; rm -f x y ; touch x ; /usr/bin/cp -p x y && print OK ; true'
ksh93 -c 'builtin id ; rm -f x ; touch x ; chown "$(id -u -n):$(id -g -n)" x && print OK'
ksh93 -c 'builtin id ; rm -f x ; touch x ; chgrp "$(id -g -n)" x && print OK'
---- snip ----


#
# Tests for groups
# (Add groups "cygwingrp1" and "cygwingrp2" to both Linux NFSv4 server
# and Windows machine, after that $ chgrp cygwingrp2 # should work)
#
---- snip ----
# "WINHOST1" is the Windows machine,
# "DERFWNB4966" is the Linux NFSv4 server:

# create two groups on the Windows machine
WINHOST1:~$ net localgroup cygwingrp1 /add
WINHOST1:~$ net localgroup cygwingrp2 /add

# add user "roland_mainz" to both new groups
WINHOST1:~$ net localgroup cygwingrp1 roland_mainz /add
WINHOST1:~$ net localgroup cygwingrp2 roland_mainz /add

# get gid from both groups
WINHOST1:~$ getent group cygwingrp1
cygwingrp1:S-1-5-21-3286904461-661230000-4220857270-1003:197611:
WINHOST1:~$ getent group cygwingrp2
cygwingrp2:S-1-5-21-3286904461-661230000-4220857270-1004:197612:

# add the two groups to the Linux NFSv4 server, including the gids
("197611" and "197612"):
root@DERFWNB4966:~# groupadd -g 197611 cygwingrp1
root@DERFWNB4966:~# groupadd -g 197612 cygwingrp2
root@DERFWNB4966:~# usermod -a -G cygwingrp1 roland_mainz
root@DERFWNB4966:~# usermod -a -G cygwingrp2 roland_mainz
---- snip ---

#
# Test for group ACLs
#
Testcase:
-------- snip --------
# cd to a NFSv4.1 filesystem
$ rm -f test1.txt
$ touch test1.txt
$ icacls test1.txt /grant:r 'cygwingrp1:(WDAC)' /t /c
Bearbeitete Datei: test1.txt
1 Dateien erfolgreich verarbeitet, bei 0 Dateien ist ein Verarbeitungsfehler aufgetreten.

$ icacls test1.txt /grant:r 'cygwingrp2:(WDAC)' /t /c
Bearbeitete Datei: test1.txt
1 Dateien erfolgreich verarbeitet, bei 0 Dateien ist ein Verarbeitungsfehler aufgetreten.

# expectation:
# getfact output should contain both "cygwingrp1" and "cygwingrp2":
$ getfacl test1.txt
user::r--
group::r--
group:cygwingrp1:r--
group:cygwingrp2:r--
mask::r--
other::r--
-------- snip --------

or one-liner:
-------- snip --------
# cd to a NFSv4.1 filesystem
# getfact output should contain both "cygwingrp1" and "cygwingrp2"
ksh93 -c 'rm -f test1.txt ; touch test1.txt ; icacls test1.txt /grant:r "cygwingrp1:(WDAC)" /grant:r "cygwingrp2:(WDAC)" /t /c ; getfacl test1.txt | grep -C 20 --colour -E "cygwingrp[12]"'
-------- snip --------



#
# Compile each of the following package
# on a NFSv4.1 share, and run each build in parallel/sequence
# multiple times on one or multiple mounts
#
# ./nfs_mount -p -o sec=sys T derfwnb4966_ipv6:/net_tmpfs2
# ./nfs_mount -p -o sec=sys R derfwnb4966_ipv6:/net_tmpfs2/test2
#


#
# ksh93 (ast-ksh)
#

#
# build ast-ksh ksh93 1.0.8 with UNC support enabled
# (see ms-nfs41-client/cygwin/cygwin_ksh93/cygwin_ksh93.readme for
# instructions how to build a Cygwin package)
#
git clone -b 'v1.0.8' https://github.com/ksh93/ksh.git
cd ksh
git config --global --add safe.directory "$PWD"
# add patch so UNC path support is enabled (e.g. "cd cd //derfwnb4966_ipv6linklocal@2049/nfs4/net_tmpfs")
patch -p1 <'../cygwin/cygwin_ksh93/ksh_1_0_8_libast_Cygwin_set_PATH_LEADING_SLASHES_for_UNC_paths.patch'
sed -i -r 's/mkfifo.+?(-m [[:digit:]]+)/mkfifo /g' ./src/cmd/INIT/package.sh ./bin/package
# repeat:
rm -Rf arch
time bash -c 'export SHELL=/bin/bash HOSTTYPE="cygwin.i386-64"; /bin/bash ./bin/package make CC="/usr/bin/cc -std=gnu17" CCFLAGS="-Os -g" SHELL="$SHELL" HOSTTYPE="$HOSTTYPE"' 2>&1 | tee buildlog.log


#
# bash
#

# build bash with very long PWD (${#PWD} == 1053 is known to work
# if the nfs server supports path lengths > 1024)
typeset -i i
typeset longpath=''
for ((i=0 ; ${#longpath} < 1024 ; i++)) ; do
    longpath+="longpath__$i/"
done
mkdir -p "$longpath" && cd "$longpath"
printf "path_len=%d\n" "${#PWD}"

git clone https://git.savannah.gnu.org/git/bash.git
cd bash/
# Cygwin: workaround for configure using cp -p where ln -s should be used
# (this is an automake/autoconf issue, they should trust Cygwin and not use
# ancient workarounds for issues which no longer exists)
(set -o xtrace ; sed -i "s/as_ln_s='cp -pR'/as_ln_s='ln -s'/g" $(find . -name configure) )
# run configure
./configure --with-curses
# repeat:
make clean && make -j4 all


#
# ms-nfs41-client
#
git clone https://github.com/kofemann/ms-nfs41-client.git
cd ms-nfs41-client
export PATH+=":/cygdrive/c/Program Files (x86)/Microsoft Visual Studio/2019/Community/MSBuild/Current/Bin/"
# repeat:
# clean
rm -vRf $(find . -name Debug -o -name Release)
# build
MSBuild.exe build.vc19/nfs41-client.sln -t:Build  -p:Configuration=Debug -p:Platform=x64
MSBuild.exe build.vc19/nfs41-client.sln -t:Build  -p:Configuration=Release -p:Platform=x64


#
# gcc
#
# * Notes:
# - The build requires that there are at least 131 characters left in
#   the path, e.g. $ echo $((260-${#PWD} > 131)) # should be "1",
#   otherwise the buildcan "randomly" fail with internal gcc errors.
#   Note that PWD might be the UNC path.
#   ---- snip ----
#   $ cd gcc
#   $ ksh93 -c 'integer pnl pnl_max ; find . | while read pn ; do pnl=${#pn} ; (( pnl_max=fmax(pnl, pnl_max) )) ; done ; printf "max_path_length=%d\n" pnl_max'
#   max_path_length=131
#   ---- snip ----
# - Full build can easily take ~~16 hours minutes
# - Option "--disable-libstdcxx-pch" is used due to bug
#   https://gcc.gnu.org/bugzilla/show_bug.cgi?id=114381 ("(Sporadic)
#   crash generating x86_64-pc-cygwin/bits/extc++.h.gch/O2g.gch")
#
git clone -b 'releases/gcc-13.2.0' git://gcc.gnu.org/git/gcc.git
cd gcc/
# Cygwin: workaround for configure using cp -p where ln -s should be used
# (this is an automake/autoconf issue, they should trust Cygwin and not use
# ancient workarounds for issues which no longer exists)
(set -o xtrace ; sed -i "s/as_ln_s='cp -pR'/as_ln_s='ln -s'/g" $(find . -name configure) )
# run configure
./configure --disable-libstdcxx-pch
# repeat:
make -j4 clean
(yes | make -j32 all)

# EOF.
